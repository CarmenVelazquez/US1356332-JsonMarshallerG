#!/usr/bin/env groovy

// Promotion job for DEFAULT build in repo

//  Variety: application with NO config
//  Features:
//      WAR, EAR or executable JAR (e.g. Spring Boot) is in Nexus
//      Archive info.yaml file from Nexus
//      Tags commit of original build with deploy message and env name
//      Tags deployment from master and any promotion

// How to use this template. Things to fill in (simplest cases) search for 'fill-in'
//  1) GitHub repo URL without .git on the end
//  2) Display name to describe build results
//  3) Fill in application name when finding artifacts in repo
//  4) Fill in team name as part of the Jenkins group allowing access to deploy
//  5) Add any additional files that need promoting into additionalFileList
//  6) Update the email list with space delimited emails to receive notifications
//
// Additionally many other bits of code can be customized. Only do this if really needed so
//  you can take advantage of improvements to this template

import groovy.transform.Field
import com.aa.jenkins.pipeline.ArtifactModel
import com.aa.jenkins.pipeline.AdditionalArtifactModel

@Field final String gitRepoUrl = 'https://ghe.aa.com/aot-foct/CQE_JsonUnMarshaller'    // git repo without .git on end
@Field final String gitRepoDisplayName = 'CWR_JsonUnMarshaller'              // discription of git repo for humans to read
@Field final String applicationName = "JsonUnMarshaller"        // display in error messages
@Field final String appnamePermissionPrefix = 'CWR'                 // short application initials eg. CCS, LKA, FACET, etc

properties properties: [
        pipelineTriggers([]),
        disableConcurrentBuilds(),
        [$class: 'GithubProjectProperty', displayName: gitRepoDisplayName, projectUrlStr: gitRepoUrl],
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
        parameters([
                choice(choices: 'test\nstage\nprod\n', description: 'Select env to promote to', name: 'TARGET_ENV'),
                string(defaultValue: env.VERSION, description: 'Specify a specific version to promote', name: 'VERSION'),
        ]),
]

notify = new com.aa.jenkins.pipeline.notify()
structure = new com.aa.jenkins.pipeline.structure()
report = new com.aa.jenkins.pipeline.report()
nexus = new com.aa.jenkins.pipeline.nexus()
deploy = new com.aa.jenkins.pipeline.deploy()
security = (new com.aa.jenkins.pipeline.security()).setScript(this)

//@Field final String deployableArtifactFolder = ''
@Field final String pomFilename = 'pom.xml'
@Field final String nexusInstanceId = 'enterprise-artifactory'
@Field final String settingsFilePath = ''
@Field String destinationEnvironmentName

Map<String, Object> stageReportParams
ArtifactModel artifactModel
@Field def additionalFileList

@Field String emailList = 'fill-in@aa.com' // space delimited list
@Field String gitCreds = 'GHE-GitHub-CICD-Z1059754'

@Field String stageName
timestamps {
    node('linux') {
        destinationEnvironmentName = params?.TARGET_ENV
        if (!destinationEnvironmentName || !params?.VERSION) {
            error "ERROR: First run (without parameters) will always fail"
        }

        def userid = structure.getBuildUser()
        echo "USER STARTING BUILD: ${userid} ... CHECKING PERMISSIONS"
        if (!security.checkPromotePermission(env.JOB_NAME, appnamePermissionPrefix, destinationEnvironmentName, userid)) {
            error "User ${userid} not allowed to promote to ${destinationEnvironmentName}"
        }
        echo "USER allowed to promote to ${destinationEnvironmentName}"

        stageName = 'prepare'
        stage(stageName) {
//            sh 'pwd ; ls -al ; env | sort' // debug

            branch = structure.gitBranchFromScm(scm)
            echo "branch=${branch}"

            notify.notifySlack("START")

            if (env.EMAIL_LIST) {
                emailList = env.EMAIL_LIST
            }

            if (env.GIT_USER) {
                gitCreds = env.GIT_USER
            }

            structure.withNotification(to: emailList, includeDevelopers: true, stageName: stageName) {
                checkout scm

                stageReportParams = report.stageCompleted(stageName: "git", branch: branch, pomFilename: /* withTrailingSlash(deployableArtifactFolder) + */ pomFilename, gitRepoUrl: gitRepoUrl)

                // configure settings.xml to be used for this build, prepare artifact model for publish to Artifactory
                withCredentials([usernamePassword(credentialsId: 'CICD-Enterprise-Nexus3-Deployer', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USER')]) {
                    loadSettingsXml(user: NEXUS_USER, password: NEXUS_PASSWORD, useEnterpriseNexus: true)
                    settingsFilePath = "${env.WORKSPACE}/.settings.xml"
                }

                // Collect the list of files to promote
                artifactModel = nexus.readArtifactModel(
                        /* withTrailingSlash(deployableArtifactFolder) + */ pomFilename)
                artifactModel.version = params.VERSION
                artifactModel.sourceNexusRepository(destinationEnvironmentName)
                artifactModel.defaultFilePath(/* deployableArtifactFolder */)
//                artifactModel.packaging = 'sh' // for spring boot executable jar/war
                nexus.verifyDeployableExistsInNexus(applicationName,
                        artifactModel,
                        artifactModel.sourceEnvironmentName,
                        'ci-builds',
                        nexusInstanceId)
                artifactModel.calculateDestinationRepo()

                // Collect list of additional files to promote. First is info.yaml
                AdditionalArtifactModel infoFileModel = AdditionalArtifactModel.newInstance('', 'yaml', 'info')
                infoFileModel.defaultFilePath(artifactModel)
                AdditionalArtifactModel pomFileModel = AdditionalArtifactModel.newInstance('', 'pom')
                pomFileModel.defaultFilePath(artifactModel, /* deployableArtifactFolder */)
                additionalFileList = [
                        infoFileModel,
//                        sourceFileModel,
                        pomFileModel,
                ]

                echo " selectedArtifact              : ${artifactModel.toString()}\n" +
                        " additionalArtifacts           : ${additionalFileList}\n" +
                        " source nexusRepository        : ${artifactModel.nexusRepository}\n" +
                        " destination nexusRepository   : ${artifactModel.nexusDestinationRepository}\n"

                // Load all the artifacts being promoted into
                nexus.doArtifactsExistInNexus(artifactModel, additionalFileList, nexusInstanceId)
                nexus.downloadArtifactsFromNexus(artifactModel, additionalFileList, nexusInstanceId)
            }
        }

        stageName = 'promote'
        stage(stageName) {
            structure.withNotification(to: emailList, stageName: stageName) {
                echo "ARTIFACT MODEL: " + artifactModel.toString()
                nexus.publishDeployableWithMvn(artifactModel, 'pom.xml', nexusInstanceId, null, settingsFilePath, null, additionalFileList)

                report.stageCompleted(stageName: "promote" + destinationEnvironmentName.capitalize(), params: stageReportParams)
            }
        }

        stageName = 'tagging'
        stage(stageName) {
            if (currentBuild.result == null || currentBuild.result == "SUCCESS") {
                structure.withNotification(to: emailList, stageName: stageName) {
                    boolean anythingTagged = false
                    for (ArtifactModel theArtifactModel in [artifactModel,]) {
                        def infoFile = structure.readInfoFileFromNexus(theArtifactModel, nexusInstanceId, 'target')
                        String commitSHA = infoFile.commitId
                        String gitUrl = infoFile.gitURL
                        echo "TAGGING INFO: >${gitUrl}< >${commitSHA}<"

                        if (commitSHA) {
                            String versionNumber = theArtifactModel.version
                            structure.createAndPushTag(versionNumber, "promoteTo-${destinationEnvironmentName}", gitCreds, false, commitSHA, gitUrl)
                            anythingTagged = true
                        } else {
                            println "WARNING: info.yaml not found or corrupted -- no tag created"
                            currentBuild.result = 'UNSTABLE'
                            println 'WARNING: build status UNSTABLE due to inability to find info.yaml'
                        }

                        archiveArtifacts allowEmptyArchive: true, artifacts: infoFile.infoFilePath, onlyIfSuccessful: true
                    }
                    if (anythingTagged) {
                        report.stageCompleted(stageName: "taggingPromote", params: stageReportParams)
                    }
                }
            } else {
                println "WARNING: build status=${currentBuild.result}, no tag created"
            }
        }

        stageName = 'notifications'
        stage(stageName) {
            report.buildCompleted(stageReportParams, currentBuild.startTimeInMillis, System.currentTimeMillis(), true)

            String currentBuildResult = "${currentBuild.result ?: 'SUCCESS'}"
            echo "${currentBuildResult} : Job '${env.JOB_NAME} [${env.BUILD_NUMBER} ${branch}]'"
            notify.notifyWithCurrentBuildResult([to: emailList, includeDevelopers: true], currentBuildResult)
        }
    }
}

private String withTrailingSlash(String path) {
    path + (path ? '/' : '')
}